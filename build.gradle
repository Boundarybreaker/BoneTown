buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

version = '0.1'
group = 'com.chaosbuffalo.bonetown' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'bonetown'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    maven { url = 'https://files.minecraftforge.net/maven' }
    jcenter()
    mavenCentral()
}


configurations {
    // configuration that holds jars to embed inside the jar
    embed
    compile.extendsFrom embed
}


minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200125-1.15.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                bonetown {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                bonetown {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'bonetown', '--all', '--output', file('src/generated/resources/')

            mods {
                bonetown {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.15.2-31.0.1'
    shadow (group: 'org.lwjgl', name: 'lwjgl-assimp', version: '3.2.2'){
        exclude group: 'org.lwjgl', module: 'lwjgl'
    }
    // https://mvnrepository.com/artifact/org.joml/joml
    shadow group: 'org.joml', name: 'joml', version: '1.9.2'



    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

//task generateMetaFiles {
//    // Code for execution after the whole buildscript was parsed and loaded
//    doLast {
//        // Clear the dependencyMeta directory since we don't want old dependencies to still be listed in there
//        file("${buildDir}/dependencyMeta/").deleteDir()
//        configurations.embed.resolvedConfiguration.resolvedArtifacts.each {
//            // Create a meta file for each dependency in a specified directory
//            def metaFile = file("${buildDir}/dependencyMeta/${it.file.name}.meta")
//            metaFile.parentFile.mkdirs()
//            // Use the Gradle notation provided by the API ('group:artifact:version') for the meta file...
//            def artifactRef = it.moduleVersion.toString()
//            // ...and append the classifier if present
//            if (it.classifier != null) {
//                artifactRef += ":${it.classifier}"
//            }
//            // Write the artifact information to the meta file, to be used by the
//            metaFile.text = "Maven-Artifact: $artifactRef"
//        }
//    }
//}


// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "bonetown",
            "Specification-Vendor": "chaosbuffalo",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"chaosbuffalo",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
//    into('/META-INF/libraries') {
//        from configurations.embed
//        from "${buildDir}/dependencyMeta/"
//    }
//    doFirst {
//        manifest {
//            def contained = configurations.embed.collect { it.getName() };
//            if (!contained.isEmpty()) {
//                attributes([
//                        "ContainedDeps": contained.join(' ')
//                ])
//            }
//        }
//    }
//    dependsOn generateMetaFiles
}

shadowJar {
    project.configurations.shadow.setTransitive(true);
    configurations = [project.configurations.shadow]

    classifier '' // Replace the default JAR

    relocate "org.lwjgl.assimp", "com.chaosbuffalo.bonetown.repack.org.lwjgl.assimp"
}

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}


// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
